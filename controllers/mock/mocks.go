// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllers/ports.go

// Package mock_controllers is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controllerruntime "sigs.k8s.io/controller-runtime"
	v1 "stackit.cloud/datalogger/api/v1"
)

// MockDataLoggerReconcileOperator is a mock of DataLoggerReconcileOperator interface.
type MockDataLoggerReconcileOperator struct {
	ctrl     *gomock.Controller
	recorder *MockDataLoggerReconcileOperatorMockRecorder
}

// MockDataLoggerReconcileOperatorMockRecorder is the mock recorder for MockDataLoggerReconcileOperator.
type MockDataLoggerReconcileOperatorMockRecorder struct {
	mock *MockDataLoggerReconcileOperator
}

// NewMockDataLoggerReconcileOperator creates a new mock instance.
func NewMockDataLoggerReconcileOperator(ctrl *gomock.Controller) *MockDataLoggerReconcileOperator {
	mock := &MockDataLoggerReconcileOperator{ctrl: ctrl}
	mock.recorder = &MockDataLoggerReconcileOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataLoggerReconcileOperator) EXPECT() *MockDataLoggerReconcileOperatorMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockDataLoggerReconcileOperator) Reconcile(ctx context.Context, req controllerruntime.Request, dataLogger *v1.DataLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx, req, dataLogger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockDataLoggerReconcileOperatorMockRecorder) Reconcile(ctx, req, dataLogger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockDataLoggerReconcileOperator)(nil).Reconcile), ctx, req, dataLogger)
}

// MockNamespaceReconcileOperator is a mock of NamespaceReconcileOperator interface.
type MockNamespaceReconcileOperator struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceReconcileOperatorMockRecorder
}

// MockNamespaceReconcileOperatorMockRecorder is the mock recorder for MockNamespaceReconcileOperator.
type MockNamespaceReconcileOperatorMockRecorder struct {
	mock *MockNamespaceReconcileOperator
}

// NewMockNamespaceReconcileOperator creates a new mock instance.
func NewMockNamespaceReconcileOperator(ctrl *gomock.Controller) *MockNamespaceReconcileOperator {
	mock := &MockNamespaceReconcileOperator{ctrl: ctrl}
	mock.recorder = &MockNamespaceReconcileOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceReconcileOperator) EXPECT() *MockNamespaceReconcileOperatorMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockNamespaceReconcileOperator) Reconcile(ctx context.Context, req controllerruntime.Request) (controllerruntime.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx, req)
	ret0, _ := ret[0].(controllerruntime.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockNamespaceReconcileOperatorMockRecorder) Reconcile(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockNamespaceReconcileOperator)(nil).Reconcile), ctx, req)
}
