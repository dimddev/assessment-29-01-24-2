// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/ports.go

// Package mock_pkg is a generated GoMock package.
package pkg

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"
	client "sigs.k8s.io/controller-runtime/pkg/client"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockApiClientOperator is a mock of ApiClientOperator interface.
type MockApiClientOperator struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientOperatorMockRecorder
}

// MockApiClientOperatorMockRecorder is the mock recorder for MockApiClientOperator.
type MockApiClientOperatorMockRecorder struct {
	mock *MockApiClientOperator
}

// NewMockApiClientOperator creates a new mock instance.
func NewMockApiClientOperator(ctrl *gomock.Controller) *MockApiClientOperator {
	mock := &MockApiClientOperator{ctrl: ctrl}
	mock.recorder = &MockApiClientOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClientOperator) EXPECT() *MockApiClientOperatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockApiClientOperator) Create(ctx context.Context, obj client.Object, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockApiClientOperatorMockRecorder) Create(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApiClientOperator)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockApiClientOperator) Delete(ctx context.Context, obj client.Object, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockApiClientOperatorMockRecorder) Delete(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApiClientOperator)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockApiClientOperator) Get(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockApiClientOperatorMockRecorder) Get(ctx, key, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApiClientOperator)(nil).Get), varargs...)
}

// Scheme mocks base method.
func (m *MockApiClientOperator) Scheme() *runtime.Scheme {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheme")
	ret0, _ := ret[0].(*runtime.Scheme)
	return ret0
}

// Scheme indicates an expected call of Scheme.
func (mr *MockApiClientOperatorMockRecorder) Scheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheme", reflect.TypeOf((*MockApiClientOperator)(nil).Scheme))
}

// Update mocks base method.
func (m *MockApiClientOperator) Update(ctx context.Context, obj client.Object, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockApiClientOperatorMockRecorder) Update(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockApiClientOperator)(nil).Update), varargs...)
}

// MockLogOperator is a mock of LogOperator interface.
type MockLogOperator struct {
	ctrl     *gomock.Controller
	recorder *MockLogOperatorMockRecorder
}

// MockLogOperatorMockRecorder is the mock recorder for MockLogOperator.
type MockLogOperatorMockRecorder struct {
	mock *MockLogOperator
}

// NewMockLogOperator creates a new mock instance.
func NewMockLogOperator(ctrl *gomock.Controller) *MockLogOperator {
	mock := &MockLogOperator{ctrl: ctrl}
	mock.recorder = &MockLogOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogOperator) EXPECT() *MockLogOperatorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLogOperator) Error(err error, msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{err, msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLogOperatorMockRecorder) Error(err, msg interface{}, keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{err, msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogOperator)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogOperator) Info(msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLogOperatorMockRecorder) Info(msg interface{}, keysAndValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogOperator)(nil).Info), varargs...)
}

// MockReconcileOperator is a mock of ReconcileOperator interface.
type MockReconcileOperator struct {
	ctrl     *gomock.Controller
	recorder *MockReconcileOperatorMockRecorder
}

// MockReconcileOperatorMockRecorder is the mock recorder for MockReconcileOperator.
type MockReconcileOperatorMockRecorder struct {
	mock *MockReconcileOperator
}

// NewMockReconcileOperator creates a new mock instance.
func NewMockReconcileOperator(ctrl *gomock.Controller) *MockReconcileOperator {
	mock := &MockReconcileOperator{ctrl: ctrl}
	mock.recorder = &MockReconcileOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReconcileOperator) EXPECT() *MockReconcileOperatorMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockReconcileOperator) Reconcile(ctx context.Context, req reconcile.Request, r ApiClientOperator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx, req, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockReconcileOperatorMockRecorder) Reconcile(ctx, req, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockReconcileOperator)(nil).Reconcile), ctx, req, r)
}

// MockDeploymentOperator is a mock of DeploymentOperator interface.
type MockDeploymentOperator struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentOperatorMockRecorder
}

// MockDeploymentOperatorMockRecorder is the mock recorder for MockDeploymentOperator.
type MockDeploymentOperatorMockRecorder struct {
	mock *MockDeploymentOperator
}

// NewMockDeploymentOperator creates a new mock instance.
func NewMockDeploymentOperator(ctrl *gomock.Controller) *MockDeploymentOperator {
	mock := &MockDeploymentOperator{ctrl: ctrl}
	mock.recorder = &MockDeploymentOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentOperator) EXPECT() *MockDeploymentOperatorMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockDeploymentOperator) Reconcile(ctx context.Context, req reconcile.Request, r ApiClientOperator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx, req, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockDeploymentOperatorMockRecorder) Reconcile(ctx, req, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockDeploymentOperator)(nil).Reconcile), ctx, req, r)
}

// MockServiceOperator is a mock of ServiceOperator interface.
type MockServiceOperator struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOperatorMockRecorder
}

// MockServiceOperatorMockRecorder is the mock recorder for MockServiceOperator.
type MockServiceOperatorMockRecorder struct {
	mock *MockServiceOperator
}

// NewMockServiceOperator creates a new mock instance.
func NewMockServiceOperator(ctrl *gomock.Controller) *MockServiceOperator {
	mock := &MockServiceOperator{ctrl: ctrl}
	mock.recorder = &MockServiceOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOperator) EXPECT() *MockServiceOperatorMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockServiceOperator) Reconcile(ctx context.Context, req reconcile.Request, r ApiClientOperator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx, req, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockServiceOperatorMockRecorder) Reconcile(ctx, req, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockServiceOperator)(nil).Reconcile), ctx, req, r)
}

// MockNamespaceOperator is a mock of NamespaceOperator interface.
type MockNamespaceOperator struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceOperatorMockRecorder
}

// MockNamespaceOperatorMockRecorder is the mock recorder for MockNamespaceOperator.
type MockNamespaceOperatorMockRecorder struct {
	mock *MockNamespaceOperator
}

// NewMockNamespaceOperator creates a new mock instance.
func NewMockNamespaceOperator(ctrl *gomock.Controller) *MockNamespaceOperator {
	mock := &MockNamespaceOperator{ctrl: ctrl}
	mock.recorder = &MockNamespaceOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceOperator) EXPECT() *MockNamespaceOperatorMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockNamespaceOperator) Reconcile(ctx context.Context, req reconcile.Request, r ApiClientOperator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx, req, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockNamespaceOperatorMockRecorder) Reconcile(ctx, req, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockNamespaceOperator)(nil).Reconcile), ctx, req, r)
}
